module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'airbnb-base',
    'plugin:@typescript-eslint/recommended',
    'plugin:vue/vue3-recommended',
    'plugin:prettier/recommended',
  ],
  parserOptions: {
    ecmaVersion: 12,
    parser: '@typescript-eslint/parser',
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  plugins: ['vue', '@typescript-eslint'],
  rules: {
    // all rules docs https://eslint.org/docs/rules/
    'vue/multi-word-component-names': 'off',
    'vue/no-v-html': 'off',
    'vue/v-on-event-hyphenation': 'off',
    'no-useless-constructor': 'off',
    'no-throw-literal': 'off',
    'no-unused-expressions': 'off',
    'no-shadow': 'off',
    'no-continue': 'off',
    'guard-for-in': 'off',
    'default-case': 'off',
    'no-debugger': 'off',
    'no-restricted-syntax': 'off',
    'import/prefer-default-export': 'off',
    'import/extensions': 0,
    'import/no-unresolved': 0,
    'no-param-reassign': 0,
    'no-console': 0,
    'consistent-return': 0,
    'quote-props': 'off',
    'comma-dangle': ['error', 'always-multiline'],
    'comma-style': ['error', 'last'],
    'no-mixed-operators': 'off',
    'max-classes-per-file': 'off',
    'class-methods-use-this': 'off',
    'no-unused-vars': ['off'],
    'block-spacing': ['error', 'always'],
    'object-curly-spacing': ['error', 'always'],
    'no-control-regex': ['off'],
    'no-plusplus': [
      2,
      {
        allowForLoopAfterthoughts: true,
      },
    ],
    semi: ['error', 'always'],
    quotes: [
      2,
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    '@typescript-eslint/no-explicit-any': 0,
    '@typescript-eslint/no-empty-function': 0,
    '@typescript-eslint/no-non-null-assertion': 0,
    '@typescript-eslint/explicit-module-boundary-types': 0,
  },
  /* Support vue SFC setup */
  globals: {
    defineProps: 'readonly',
    defineEmits: 'readonly',
    defineExpose: 'readonly',
    withDefaults: 'readonly',
    ref: 'readonly',
    reactive: 'readonly',
    watch: 'readonly',
    watchEffect: 'readonly',
    watchPostEffect: 'readonly',
    watchSyncEffect: 'readonly',
    effectScope: 'readonly',
    computed: 'readonly',
    readonly: 'readonly',
    isProxy: 'readonly',
    isReactive: 'readonly',
    isReadonly: 'readonly',
    toRaw: 'readonly',
    markRaw: 'readonly',
    shallowReactive: 'readonly',
    shallowReadonly: 'readonly',
    unref: 'readonly',
    toRef: 'readonly',
    toRefs: 'readonly',
    isRef: 'readonly',
    customRef: 'readonly',
    shallowRef: 'readonly',
    triggerRef: 'readonly',
    // lifecycle
    onMounted: 'readonly',
    onUpdated: 'readonly',
    onUnmounted: 'readonly',
    onBeforeMount: 'readonly',
    onBeforeUpdate: 'readonly',
    onBeforeUnmount: 'readonly',
    onErrorCaptured: 'readonly',
    onRenderTracked: 'readonly',
    onRenderTriggered: 'readonly',
    onActivated: 'readonly',
    onDeactivated: 'readonly',
    // provide / inject
    inject: 'readonly',
    provide: 'readonly',
    getCurrentInstance: 'readonly',
  },
};
